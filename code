#include <stdio.h>
#include <graphics.h>
#include <conio.h>
#define g gotoxy
#define p printf
#define s scanf

void drawCircle(int x, int y, int radius) {
    circle(x, y, radius);
    floodfill(x, y, WHITE);
}

void drawLine(int x1, int y1, int x2, int y2) {
    line(x1, y1, x2, y2);
}

int main() {
    int i, x, y, level;
    char node1[1],node2[1],node3[1],node4[1],node5[1],node6[1],node7[1],node8[1],
    node9[1],node10[1],node11[1],node12[1],node13[1],node[1],node14[1],node15[1];
    int gd = DETECT, gm;
    initgraph(&gd, &gm, "C:\\Turboc3\\BGI");

    p("How many levels of binary tree? ");
    s("%d", &level);

    clrscr(); // Clear the console screen

    if (level == 1) {
	x = getmaxx() / 2; // Get the center of the screen
	y = 50;
	drawCircle(x, y, 20); // Draw root node
	g(x - 2, y);
	textcolor(RED); // Set text color to black
	p("Enter a character: ");
	g(40,4);scanf(" %s", &node1);

	g(3,20);p("TLR: %s",node1 );
	g(3,21);p("LRT: %s",node1);
	g(3,22);p("LTR: %s",node1);

    } else if (level == 2) {
	x = getmaxx() / 2;
	y = 50;

	// Draw root node
	drawCircle(x, y, 20);
	g(1,1);p("Enter a character: ");
	g(40,4);scanf(" %s", &node1);

	// Draw left child
	drawCircle(x - 50, y + 50, 20);
	drawLine(x, y + 20, x - 50, y + 30);

	// Draw right child
	drawCircle(x + 50, y + 50, 20);
	drawLine(x, y + 20, x + 50, y + 30);

	// Let user input for left child
	g(1,1);p("Enter a character: ");
	g(34,7);s(" %s", &node2);

	// Let user input for right child
	g(1,1);p("Enter a character: ");
	g(47,7);s(" %s", &node3);

	g(3,20);p("TLR:%s,%s,%s",node1,node2,node3);
	g(3,21);p("LRT: %s,%s,%s",node2,node3,node1);
	g(3,22);p("LTR: %s,%s,%s",node2,node1,node3);


    } else if (level == 3) {
	x = getmaxx() / 2;
	y = 50;

// Draw root node
drawCircle(x, y, 20);
g(1, 1); p("Enter a character: ");
g(40, 4); scanf(" %s", &node1);

// Draw left child
drawCircle(x - 50, y + 50, 20);
drawLine(x, y + 20, x - 50, y + 30);
g(1, 1); p("Enter a character: ");
g(34, 7); s(" %s", &node2);

// Draw right child
drawCircle(x + 50, y + 50, 20);
drawLine(x, y + 20, x + 50, y + 30);
g(1, 1); p("Enter a character: ");
g(47, 7); s(" %s", &node3);

// Draw 4 children connected to level 2
drawCircle(x - 75, y + 100, 20);
drawLine(x - 75, y + 80, x - 35, y + 50);
g(1, 1); p("Enter a character: ");
g(32, 10); s(" %s", &node4);

drawCircle(x - 25, y + 100, 20);
drawLine(x - 25, y + 80, x - 45, y + 50);
g(1, 1); p("Enter a character: ");
g(38, 10); s(" %s", &node5);

drawCircle(x + 25, y + 100, 20);
drawLine(x + 25, y + 80, x + 45, y + 50);
g(1, 1); p("Enter a character: ");
g(44, 10); s(" %s", &node6);

drawCircle(x + 75, y + 100, 20);
drawLine(x + 75, y + 80, x + 55, y + 50);
g(1, 1); p("Enter a character: ");
g(50, 10); s(" %s", &node7);

// Print the tree structure
g(3, 20); p("TLR: %s,%s,%s,%s,%s,%s,%s", node1, node2, node4, node5, node3, node6, node7);
g(3, 21); p("LRT: %s,%s,%s,%s,%s,%s,%s", node4, node5, node2, node6, node7, node3, node1);
g(3, 22); p("LTR: %s,%s,%s,%s,%s,%s,%s", node4, node2, node5, node1, node6, node3, node7);


    } else if (level == 4) {
    x = getmaxx() / 2;
    y = 50;

// Draw root node
drawCircle(x, y, 20);
g(1, 1); p("Enter a character: ");
g(40, 4); scanf(" %s", &node1);

// Draw left child
drawCircle(x - 50, y + 50, 20);
drawLine(x, y + 20, x - 50, y + 30);
g(1, 1); p("Enter a character: ");
g(34, 7); s(" %s", &node2);

// Draw right child
drawCircle(x + 50, y + 50, 20);
drawLine(x, y + 20, x + 50, y + 30);
g(1, 1); p("Enter a character: ");
g(47, 7); s(" %s", &node3);

// Draw 4 children connected to level 2
drawCircle(x - 75, y + 100, 20);
drawLine(x - 75, y + 80, x - 35, y + 50);
g(1, 1); p("Enter a character: ");
g(32, 10); s(" %s", &node4);

drawCircle(x - 25, y + 100, 20);
drawLine(x - 25, y + 80, x - 45, y + 50);
g(1, 1); p("Enter a character: ");
g(38, 10); s(" %s", &node5);

drawCircle(x + 25, y + 100, 20);
drawLine(x + 25, y + 80, x + 45, y + 50);
g(1, 1); p("Enter a character: ");
g(44, 10); s(" %s", &node6);

drawCircle(x + 75, y + 100, 20);
drawLine(x + 75, y + 80, x + 55, y + 50);
g(1, 1); p("Enter a character: ");
g(50, 10); s(" %s", &node7);
    // Draw 8 children connected to level 3
    drawCircle(x - 180, y + 150, 20);
    drawLine(x - 180, y + 130, x - 75, y + 100);
    g(1, 1); p("Enter a character: ");
    g(18, 13); s(" %s", &node8);

    drawCircle(x - 130, y + 150, 20);
    drawLine(x - 130, y + 130, x - 75, y + 100);
    g(1, 1); p("Enter a character: ");
    g(24, 13); s(" %s", &node9);

    drawCircle(x - 80, y + 150, 20);
    drawLine(x - 80, y + 130, x - 25, y + 100);
    g(1, 1); p("Enter a character: ");
    g(30, 13); s(" %s", &node10);

    drawCircle(x - 30, y + 150, 20);
    drawLine(x - 30, y + 130, x - 25, y + 100);
    g(1, 1); p("Enter a character: ");
    g(36, 13); s(" %s", &node11);

    drawCircle(x + 20, y + 150, 20);
    drawLine(x + 20, y + 130, x + 25, y + 100);
    g(1, 1); p("Enter a character: ");
    g(42, 13); s(" %s", &node12);

    drawCircle(x + 70, y + 150, 20);
    drawLine(x + 70, y + 130, x + 25, y + 100);
    g(1, 1); p("Enter a character: ");
    g(48, 13); s(" %s", &node13);

    drawCircle(x + 120, y + 150, 20);
    drawLine(x + 120, y + 130, x +75, y + 100);
    g(1, 1); p("Enter a character: ");
    g(54, 13); s(" %s", &node14);

    drawCircle(x + 170, y + 150, 20);
    drawLine(x + 170, y + 130, x + 75, y + 100);
    g(1, 1); p("Enter a character: ");
    g(60, 13); s(" %s", &node15);

    // Print the tree structure
    g(3, 20); p("TLR: %s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s", node1, node2, node4, node8, node9, node5, node10, node11, node3, node6, node12, node13, node7, node14, node15);
    g(3, 21); p("LRT: %s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s", node8, node9, node4, node10, node11, node5, node2, node12, node13, node6, node14, node15, node7, node3, node1);
    g(3, 22); p("LTR: %s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s", node8, node4, node9, node2, node10, node5, node11, node1, node12, node6, node13, node3, node14, node7, node15);

    } else {
	p("Out of range. Choose 1-4 only.");
    }

    getch();
    closegraph();

    return 0;
}
